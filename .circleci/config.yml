# Environment Variables required to be set in circleci web config
#
# AMAZON_ECR_ENDPOINT_LOWER=url-for-lower-ECR
# AMAZON_ECR_REPO=repo-name-within-ECR
# LOWER_AWS_KEY=
# LOWER_AWS_SECRET=
#
#
### Deployment Workflows:
#
# Push to Branch     | Deploy to Environment
# ------------------ | ---------------------
# integration        | mint
# staging            | staging
# master             | HOLD -> prod
#

version: 2.1

orbs:
  snyk: snyk/snyk@0.0.8

workflows:
  test-build-deploy:
    jobs:
    - cache-dependencies-lower:
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - mint
            - qa
            - /int-\w+/ 
    - cache-dependencies-upper:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - staging
            - production
        context: snyk   
    - test-jest:
        requires: 
          - cache-dependencies-lower
          - cache-dependencies-upper
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - test-poirot:
        requires: 
          - cache-dependencies-lower
          - cache-dependencies-upper
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - test-mocha:
        requires: 
          - cache-dependencies-lower
          - cache-dependencies-upper
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/
    - test-format:
        requires:
          - cache-dependencies-lower
          - cache-dependencies-upper
        filters:
          branches:
            only:
            - /.*/
          tags:
            only:
            - /.*/    
    - build-webpack:
        requires: [test-jest, test-mocha, test-format, test-poirot]
        filters:
          branches:
            only:
            - master
            - /[Ff]eature-\w+-\d+[-\w]*/
            - /snyk-fix-.*/
          tags:
            only:
            - production
            - staging
            - mint
            - qa
            - /int-\w+/
            - /RELEASE-\d+/
    - build-package:
        requires: [build-webpack]
        filters:
          branches:
            only:
            - master
            - /[Ff]eature-\w+-\d+[-\w]*/
            - /snyk-fix-.*/
          tags:
            only:
            - production
            - staging
            - mint
            - pat
            - /int-\w+/
            - /RELEASE-\d+/
    - upload-package:
        requires: [build-package]
        filters:
          branches:
            only:
            - master
            - /snyk-fix-.*/
          tags:
            only:
            - mint
            - pat
            - /int-\w+/
            - /RELEASE-\d+/
        context: sba-gov-lower
    - deploy-package:
        requires: [upload-package]
        filters:
          branches:
            only:
            - master
            - /snyk-fix-.*/
          tags:
            only:
            - mint
            - qa
            - /int-\w+/
            - /RELEASE-\d+/
        context: sba-gov-lower
    - hold:
        type: approval
        requires: [build-package]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
    - upload-package-with-approval:
        requires: [hold]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
        context: sba-gov-upper
    - deploy-package-with-approval:
        requires: [upload-package-with-approval]
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - production
            - staging
        context: sba-gov-upper
jobs:
  cache-dependencies-lower:
    docker:
    - image: circleci/node:12.18
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-v1-{{ checksum "package.json" }}
      - run:
          name: install dependencies
          command: |
            npm install --silent --no-save
            npm i serverless --silent --no-save
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-v1-{{ checksum "package.json" }}
  cache-dependencies-upper:
    docker:
    - image: circleci/node:12.18
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-v1-{{ checksum "package.json" }}
      - run:
          name: install dependencies
          command: |
            npm install --silent --no-save
            npm i serverless --silent --no-save
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-v1-{{ checksum "package.json" }}
      - snyk/scan:
          token-variable: SNYK
          fail-on-issues: false
  test-jest:
    docker:
    - image: circleci/node:12.18
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-v1-{{ checksum "package.json" }}
      - run:
          name: run jest
          command: |
            npm run test-jest
  test-mocha:
    docker:
    - image: circleci/node:12.18
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-v1-{{ checksum "package.json" }}
      - run:
          name: run mocha
          command: |
            npm run test-mocha
  test-format:
    docker:
    - image: circleci/node:12.18
    steps:
    - checkout
    # Download and cache dependencies
    - restore_cache:
        keys:
        - v2-dependencies-v1-{{ checksum "package.json" }}
    # - run:
    #     name: run eslint fix and prettier
    #     command:
    #       npm run format
  test-poirot:
    docker:
    - image: circleci/python:latest
    steps:
    - checkout
    - run:
       name: Run poirot tests
       command: |
         sudo pip install poirot
         poirot --patterns='https://sbagovlower-stash.s3.amazonaws.com/rules.txt'
         poirot --patterns='https://raw.githubusercontent.com/DCgov/poirot-patterns/master/financial.txt'
  build-webpack:
    docker:
    - image: circleci/node:12.18
    steps:
    - checkout
    # Download and cache dependencies
    - restore_cache:
        keys:
        - v2-dependencies-v1-{{ checksum "package.json" }}
    - run:
        name: build webpack
        command: |
          npm run build
    - save_cache:
        paths:
        - ./public/build
        - ./dist
        key: v1-webpack-{{ .Revision }}
  build-package:
    working_directory: /home/circleci/project
    docker:
      - image: circleci/node:12.18
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-webpack-{{ .Revision }}
      - run:
          name: create zip package
          command: |
            npm run make-lambda-package
      - persist_to_workspace:
          root: workspace
          paths:
            - katana-lambda.zip
            - build
            - assets
  upload-package:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: publish
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              ENVIRONMENT=${CIRCLE_TAG}
            elif echo "$CIRCLE_BRANCH" | grep -q "snyk-fix-" 
            then
              ENVIRONMENT=qa
            else
              ENVIRONMENT=${CIRCLE_BRANCH}
            fi

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            if [ "$ENVIRONMENT" == "master" ]	
            then	
              ENVIRONMENT=mint	
            fi	

            case $ENVIRONMENT in	
              mint)	
                export ASSET_BUCKET_NAME_PREFIX=mint.ussba.io	
                ;;
              qa)
                export ASSET_BUCKET_NAME_PREFIX=qa.ussba.io
                ;;
              int-as)
                export ASSET_BUCKET_NAME_PREFIX=avery.ussba.io
                ;;
              int-bl)
                export ASSET_BUCKET_NAME_PREFIX=brian.ussba.io
                ;;
              int-kl)
                export ASSET_BUCKET_NAME_PREFIX=kevin.ussba.io
                ;;
              int-rh)
                export ASSET_BUCKET_NAME_PREFIX=ryan.ussba.io
                ;;
              *)
                export ASSET_BUCKET_NAME_PREFIX=${ENVIRONMENT}
                ;;
            esac

            aws s3 sync workspace/build/ s3://${ASSET_BUCKET_NAME_PREFIX}-assets/build/
            aws s3 sync workspace/assets/ s3://${ASSET_BUCKET_NAME_PREFIX}-assets/assets/
            # aws s3api put-object --body "workspace/katana-lambda.zip" --bucket "${BUCKET_NAME}" --key "${ENVIRONMENT}/katana-lambda.zip"
  deploy-package:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - run:
          name: deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]	       
            then	
              TARGET_ENVIRONMENT=${CIRCLE_TAG}	
            elif echo "$CIRCLE_BRANCH" | grep -q "snyk-fix-" 
            then
              TARGET_ENVIRONMENT=qa
            else	
              TARGET_ENVIRONMENT=${CIRCLE_BRANCH}	
            fi	

            case $TARGET_ENVIRONMENT in	
              master)	
                export ENVIRONMENT=mint	
                ;;
              qa)
                export ENVIRONMENT=qa	
                ;;
              *)	
                export ENVIRONMENT=${CIRCLE_TAG}	
                ;;	
            esac


            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            serverless deploy --stage ${ENVIRONMENT}

            # export VERSION_ID=$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --prefix "${ENVIRONMENT}/katana-lambda.zip" | jq '.Versions[0].VersionId')
            # export LAMBDA_NAME="${ENVIRONMENT}-KatanaLambda"
            # aws lambda update-function-code --function-name "${LAMBDA_NAME}" --s3-bucket "${BUCKET_NAME}" --s3-key "${ENVIRONMENT}/katana-lambda.zip" --s3-object-version "${VERSION_ID}"
  upload-package-with-approval:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: publish
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              ENVIRONMENT=${CIRCLE_TAG}
            else
              ENVIRONMENT=${CIRCLE_BRANCH}
            fi

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            SOURCE_PREFIX=${ENVIRONMENT}
            case $ENVIRONMENT in
              production)
                export ASSET_BUCKET_NAME_PREFIX=www.sba.gov
                ;;
              *)
                export ASSET_BUCKET_NAME_PREFIX=staging.sba.gov
                ;;
            esac

            aws s3 sync workspace/build/ s3://${ASSET_BUCKET_NAME_PREFIX}-assets/build/
            aws s3 sync workspace/assets/ s3://${ASSET_BUCKET_NAME_PREFIX}-assets/assets/
            aws s3api put-object --body "workspace/katana-lambda.zip" --bucket "${BUCKET_NAME}" --key "${ENVIRONMENT}/katana-lambda.zip"

  deploy-package-with-approval:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - run:
          name: deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              TARGET_ENVIRONMENT=${CIRCLE_TAG}
            else
              TARGET_ENVIRONMENT=${CIRCLE_BRANCH}
            fi

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            export VERSION_ID=$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --prefix "${TARGET_ENVIRONMENT}/katana-lambda.zip" | jq '.Versions[0].VersionId')
            export LAMBDA_NAME="${TARGET_ENVIRONMENT}-KatanaLambda"

            aws lambda update-function-code --function-name "${LAMBDA_NAME}" --s3-bucket "${BUCKET_NAME}" --s3-key "${TARGET_ENVIRONMENT}/katana-lambda.zip" --s3-object-version "${VERSION_ID}"
