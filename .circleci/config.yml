# Environment Variables required to be set in circleci web config
#
# AMAZON_ECR_ENDPOINT_LOWER=url-for-lower-ECR
# AMAZON_ECR_REPO=repo-name-within-ECR
# LOWER_AWS_KEY=
# LOWER_AWS_SECRET=
#
#
### Deployment Workflows:
#
# Push to Branch     | Deploy to Environment
# ------------------ | ---------------------
# integration        | mint
# staging            | staging
# master             | HOLD -> prod
#

version: 2
workflows:
  version: 2
  test-build-deploy:
    jobs:
    - cache-dependencies:
        filters:
          branches:
            only: 
            - /.*/
          tags:
            only: 
            - /.*/
    - test-jest:
        requires: [cache-dependencies]
        filters:
          branches:
            only: 
            - /.*/
          tags:
            only: 
            - /.*/
    - test-mocha:
        requires: [cache-dependencies]
        filters:
          branches:
            only: 
            - /.*/
          tags:
            only: 
            - /.*/
    - test-lint:
        requires: [cache-dependencies]
        filters:
          branches:
            only: 
            - /.*/
          tags:
            only: 
            - /.*/
    - test-format:
        requires: [cache-dependencies]
        filters:
          branches:
            only: 
            - /.*/
          tags:
            only: 
            - /.*/
    - build-webpack:
        requires: [test-jest, test-mocha, test-lint, test-format]
        filters:
          branches:
            only:
            - master
            - integration
            - staging
            - mint
            - /[Ff]eature-\w+-\d+[-\w]*/
          tags:
            only:
            - production
            - staging
            - demo
            - mint
            - /int-\w+/
            - /RELEASE-\d+/
    - build-package:
        requires: [build-webpack]
        filters:
          branches:
            only:
            - master
            - integration
            - /[Ff]eature-\w+-\d+[-\w]*/
          tags:
            only:
            - production
            - staging
            - demo
            - mint
            - /int-\w+/
            - /RELEASE-\d+/
    - upload-package:
        requires: [build-package]
        filters:
          branches:
            only:
            - integration
          tags:
            only:
            - production
            - staging
            - demo
            - mint
            - /int-\w+/
            - /RELEASE-\d+/
    - deploy-package:
        requires: [upload-package]
        filters:
          branches:
            only:
            - integration
          tags:
            only:
            # - production
            # - staging
            - demo
            - mint
            - /int-\w+/
            - /RELEASE-\d+/
jobs:
  cache-dependencies:
    docker:
    - image: circleci/node:8.10
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: install dependencies
          command: |
            npm install --silent --no-save
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-{{ checksum "package.json" }}
  test-jest:
    docker:
    - image: circleci/node:8.10
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: run jest
          command: |
            npm run test-jest
  test-mocha:
    docker:
    - image: circleci/node:8.10
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: run mocha
          command: |
            npm run test-mocha
  test-lint:
    docker:
    - image: circleci/node:8.10
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: run lint
          command: |
            npm run lint
  test-format:
    docker:
    - image: circleci/node:8.10
    steps:
    - checkout
    # Download and cache dependencies
    - restore_cache:
        keys:
        - v2-dependencies-{{ checksum "package.json" }}
    - run:
        name: run prettier format check
        command: |
          npm run test-format
  build-webpack:
    docker:
    - image: circleci/node:8.10
    steps:
    - checkout
    # Download and cache dependencies
    - restore_cache:
        keys:
        - v2-dependencies-{{ checksum "package.json" }}
    - run:
        name: build webpack
        command: |
          npm run build
    - save_cache:
        paths:
        - ./config
        - ./public/build
        - ./dist
        key: v1-webpack-{{ .Revision }}
  build-package:
    working_directory: /home/circleci/project
    docker:
      - image: circleci/node:8.10
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-webpack-{{ .Revision }}
      - run:
          name: create zip package
          command: |
            stat ./dist
            stat ./public/build
            mkdir build
            mkdir -p build/public/build/
            mkdir -p build/config
            mkdir -p build/views
            mkdir workspace
            mkdir -p workspace/build/
            cp package.json build/
            cp -R dist/* build/
            cp -R public/build/* build/public/build/
            cp -R public/build/* workspace/build/
            cp -R config/* build/config/
            cp -R src/views/* build/views/
            cd build
            find . -name '*.test.js' -delete
            find . -name '*.integration-test.js' -delete
            npm i --prod --silent
            rm package.json
            zip -r -q ../workspace/katana-lambda.zip .
            cd ..
      - persist_to_workspace:
          root: workspace
          paths:
            - katana-lambda.zip
            - build
            - public
  upload-package:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: publish
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              ENVIRONMENT=${CIRCLE_TAG}
            else
              ENVIRONMENT=${CIRCLE_BRANCH}
            fi  

            function set_lower(){ export AWS_ACCESS_KEY_ID=$LOWER_AWS_KEY AWS_SECRET_ACCESS_KEY=$LOWER_AWS_SECRET BUCKET_NAME=$LOWER_BUCKET_NAME;}
            function set_upper(){ export AWS_ACCESS_KEY_ID=$UPPER_AWS_KEY AWS_SECRET_ACCESS_KEY=$UPPER_AWS_SECRET BUCKET_NAME=$UPPER_BUCKET_NAME;}

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            case $ENVIRONMENT in
              production)
                export ASSET_BUCKET_NAME_PREFIX=sbagovlower-www.sba.gov
                # set_upper
                set_lower
                ;;
              staging)
                export ASSET_BUCKET_NAME_PREFIX=sbagovlower-staging.sba.gov
                # set_upper
                set_lower
                ;;
              mint|integration)
                export ASSET_BUCKET_NAME_PREFIX=mint.ussba.io
                set_lower
                ;;
              demo)
                export ASSET_BUCKET_NAME_PREFIX=demo.ussba.io
                set_lower
                ;;
              int-as)
                export ASSET_BUCKET_NAME_PREFIX=avery.ussba.io
                set_lower
                ;;
              int-bl)
                export ASSET_BUCKET_NAME_PREFIX=brian.ussba.io
                set_lower
                ;;
              int-kl)
                export ASSET_BUCKET_NAME_PREFIX=kevin.ussba.io
                set_lower
                ;;
              int-ls)
                export ASSET_BUCKET_NAME_PREFIX=laura.ussba.io
                set_lower
                ;;
              int-rh)
                export ASSET_BUCKET_NAME_PREFIX=ryan.ussba.io
                set_lower
                ;;
              *)
                export ASSET_BUCKET_NAME_PREFIX=${ENVIRONMENT}
                set_lower
                ;;
            esac

            aws s3 sync workspace/build/ s3://${ASSET_BUCKET_NAME_PREFIX}-assets/build/
            aws s3 sync public/assets/ s3://${ASSET_BUCKET_NAME_PREFIX}-assets/assets/
            aws s3api put-object --body "workspace/katana-lambda.zip" --bucket "${BUCKET_NAME}" --key "${ENVIRONMENT}/katana-lambda.zip"
            
  deploy-package:
    docker:
      - image: ussba/cc-docker-git-aws:latest
    steps:
      - checkout
      - run:
          name: deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ -z "${CIRCLE_BRANCH}" ]
            then
              TARGET_ENVIRONMENT=${CIRCLE_TAG}
            else
              TARGET_ENVIRONMENT=${CIRCLE_BRANCH}
            fi 
            
            function set_lower(){ export AWS_ACCESS_KEY_ID=$LOWER_AWS_KEY AWS_SECRET_ACCESS_KEY=$LOWER_AWS_SECRET BUCKET_NAME=$LOWER_BUCKET_NAME;}
            function set_upper(){ export AWS_ACCESS_KEY_ID=$UPPER_AWS_KEY AWS_SECRET_ACCESS_KEY=$UPPER_AWS_SECRET BUCKET_NAME=$UPPER_BUCKET_NAME;}

            case $TARGET_ENVIRONMENT in
              production)
                export ENVIRONMENT=production
                set_upper
                ;;
              staging)
                export ENVIRONMENT=staging
                set_upper
                ;;
              integration)
                export ENVIRONMENT=mint
                set_lower
                ;;
              *)
                export ENVIRONMENT=${CIRCLE_TAG}
                set_lower
                ;;
            esac

            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
            export AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT:-json}

            export VERSION_ID=$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --prefix "${ENVIRONMENT}/katana-lambda.zip" | jq '.Versions[0].VersionId')
            export LAMBDA_NAME="${ENVIRONMENT}-KatanaLambda"

            aws lambda update-function-code --function-name "${LAMBDA_NAME}" --s3-bucket "${BUCKET_NAME}" --s3-key "${ENVIRONMENT}/katana-lambda.zip" --s3-object-version "${VERSION_ID}"
